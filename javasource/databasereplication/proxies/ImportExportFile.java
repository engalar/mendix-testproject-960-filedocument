// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package databasereplication.proxies;

public class ImportExportFile extends system.proxies.FileDocument
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "DatabaseReplication.ImportExportFile";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		IsZip("IsZip"),
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents"),
		Size("Size"),
		ImportExportFile_TableMapping("DatabaseReplication.ImportExportFile_TableMapping");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ImportExportFile(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "DatabaseReplication.ImportExportFile"));
	}

	protected ImportExportFile(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject importExportFileMendixObject)
	{
		super(context, importExportFileMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("DatabaseReplication.ImportExportFile", importExportFileMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a DatabaseReplication.ImportExportFile");
	}

	/**
	 * @deprecated Use 'ImportExportFile.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static databasereplication.proxies.ImportExportFile initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return databasereplication.proxies.ImportExportFile.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static databasereplication.proxies.ImportExportFile initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new databasereplication.proxies.ImportExportFile(context, mendixObject);
	}

	public static databasereplication.proxies.ImportExportFile load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return databasereplication.proxies.ImportExportFile.initialize(context, mendixObject);
	}

	public static java.util.List<databasereplication.proxies.ImportExportFile> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<databasereplication.proxies.ImportExportFile> result = new java.util.ArrayList<databasereplication.proxies.ImportExportFile>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//DatabaseReplication.ImportExportFile" + xpathConstraint))
			result.add(databasereplication.proxies.ImportExportFile.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of IsZip
	 */
	public final java.lang.Boolean getIsZip()
	{
		return getIsZip(getContext());
	}

	/**
	 * @param context
	 * @return value of IsZip
	 */
	public final java.lang.Boolean getIsZip(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.IsZip.toString());
	}

	/**
	 * Set value of IsZip
	 * @param iszip
	 */
	public final void setIsZip(java.lang.Boolean iszip)
	{
		setIsZip(getContext(), iszip);
	}

	/**
	 * Set value of IsZip
	 * @param context
	 * @param iszip
	 */
	public final void setIsZip(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean iszip)
	{
		getMendixObject().setValue(context, MemberNames.IsZip.toString(), iszip);
	}

	/**
	 * @return value of ImportExportFile_TableMapping
	 */
	public final java.util.List<databasereplication.proxies.TableMapping> getImportExportFile_TableMapping() throws com.mendix.core.CoreException
	{
		return getImportExportFile_TableMapping(getContext());
	}

	/**
	 * @param context
	 * @return value of ImportExportFile_TableMapping
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<databasereplication.proxies.TableMapping> getImportExportFile_TableMapping(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<databasereplication.proxies.TableMapping> result = new java.util.ArrayList<databasereplication.proxies.TableMapping>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.ImportExportFile_TableMapping.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(databasereplication.proxies.TableMapping.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of ImportExportFile_TableMapping
	 * @param importexportfile_tablemapping
	 */
	public final void setImportExportFile_TableMapping(java.util.List<databasereplication.proxies.TableMapping> importexportfile_tablemapping)
	{
		setImportExportFile_TableMapping(getContext(), importexportfile_tablemapping);
	}

	/**
	 * Set value of ImportExportFile_TableMapping
	 * @param context
	 * @param importexportfile_tablemapping
	 */
	public final void setImportExportFile_TableMapping(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<databasereplication.proxies.TableMapping> importexportfile_tablemapping)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (databasereplication.proxies.TableMapping proxyObject : importexportfile_tablemapping)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.ImportExportFile_TableMapping.toString(), identifiers);
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final databasereplication.proxies.ImportExportFile that = (databasereplication.proxies.ImportExportFile) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "DatabaseReplication.ImportExportFile";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Override
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
