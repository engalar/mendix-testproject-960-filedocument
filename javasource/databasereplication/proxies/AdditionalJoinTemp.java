// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package databasereplication.proxies;

public class AdditionalJoinTemp
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject additionalJoinTempMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "DatabaseReplication.AdditionalJoinTemp";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Alias("Alias"),
		ConstraintInfo("ConstraintInfo"),
		AdditionalJoinTemp_AdditionalJoins("DatabaseReplication.AdditionalJoinTemp_AdditionalJoins");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public AdditionalJoinTemp(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "DatabaseReplication.AdditionalJoinTemp"));
	}

	protected AdditionalJoinTemp(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject additionalJoinTempMendixObject)
	{
		if (additionalJoinTempMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("DatabaseReplication.AdditionalJoinTemp", additionalJoinTempMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a DatabaseReplication.AdditionalJoinTemp");

		this.additionalJoinTempMendixObject = additionalJoinTempMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'AdditionalJoinTemp.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static databasereplication.proxies.AdditionalJoinTemp initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return databasereplication.proxies.AdditionalJoinTemp.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static databasereplication.proxies.AdditionalJoinTemp initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new databasereplication.proxies.AdditionalJoinTemp(context, mendixObject);
	}

	public static databasereplication.proxies.AdditionalJoinTemp load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return databasereplication.proxies.AdditionalJoinTemp.initialize(context, mendixObject);
	}

	public static java.util.List<databasereplication.proxies.AdditionalJoinTemp> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<databasereplication.proxies.AdditionalJoinTemp> result = new java.util.ArrayList<databasereplication.proxies.AdditionalJoinTemp>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//DatabaseReplication.AdditionalJoinTemp" + xpathConstraint))
			result.add(databasereplication.proxies.AdditionalJoinTemp.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Alias
	 */
	public final java.lang.String getAlias()
	{
		return getAlias(getContext());
	}

	/**
	 * @param context
	 * @return value of Alias
	 */
	public final java.lang.String getAlias(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Alias.toString());
	}

	/**
	 * Set value of Alias
	 * @param alias
	 */
	public final void setAlias(java.lang.String alias)
	{
		setAlias(getContext(), alias);
	}

	/**
	 * Set value of Alias
	 * @param context
	 * @param alias
	 */
	public final void setAlias(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String alias)
	{
		getMendixObject().setValue(context, MemberNames.Alias.toString(), alias);
	}

	/**
	 * @return value of ConstraintInfo
	 */
	public final java.lang.String getConstraintInfo()
	{
		return getConstraintInfo(getContext());
	}

	/**
	 * @param context
	 * @return value of ConstraintInfo
	 */
	public final java.lang.String getConstraintInfo(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ConstraintInfo.toString());
	}

	/**
	 * Set value of ConstraintInfo
	 * @param constraintinfo
	 */
	public final void setConstraintInfo(java.lang.String constraintinfo)
	{
		setConstraintInfo(getContext(), constraintinfo);
	}

	/**
	 * Set value of ConstraintInfo
	 * @param context
	 * @param constraintinfo
	 */
	public final void setConstraintInfo(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String constraintinfo)
	{
		getMendixObject().setValue(context, MemberNames.ConstraintInfo.toString(), constraintinfo);
	}

	/**
	 * @return value of AdditionalJoinTemp_AdditionalJoins
	 */
	public final databasereplication.proxies.AdditionalJoins getAdditionalJoinTemp_AdditionalJoins() throws com.mendix.core.CoreException
	{
		return getAdditionalJoinTemp_AdditionalJoins(getContext());
	}

	/**
	 * @param context
	 * @return value of AdditionalJoinTemp_AdditionalJoins
	 */
	public final databasereplication.proxies.AdditionalJoins getAdditionalJoinTemp_AdditionalJoins(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		databasereplication.proxies.AdditionalJoins result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.AdditionalJoinTemp_AdditionalJoins.toString());
		if (identifier != null)
			result = databasereplication.proxies.AdditionalJoins.load(context, identifier);
		return result;
	}

	/**
	 * Set value of AdditionalJoinTemp_AdditionalJoins
	 * @param additionaljointemp_additionaljoins
	 */
	public final void setAdditionalJoinTemp_AdditionalJoins(databasereplication.proxies.AdditionalJoins additionaljointemp_additionaljoins)
	{
		setAdditionalJoinTemp_AdditionalJoins(getContext(), additionaljointemp_additionaljoins);
	}

	/**
	 * Set value of AdditionalJoinTemp_AdditionalJoins
	 * @param context
	 * @param additionaljointemp_additionaljoins
	 */
	public final void setAdditionalJoinTemp_AdditionalJoins(com.mendix.systemwideinterfaces.core.IContext context, databasereplication.proxies.AdditionalJoins additionaljointemp_additionaljoins)
	{
		if (additionaljointemp_additionaljoins == null)
			getMendixObject().setValue(context, MemberNames.AdditionalJoinTemp_AdditionalJoins.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.AdditionalJoinTemp_AdditionalJoins.toString(), additionaljointemp_additionaljoins.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return additionalJoinTempMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final databasereplication.proxies.AdditionalJoinTemp that = (databasereplication.proxies.AdditionalJoinTemp) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "DatabaseReplication.AdditionalJoinTemp";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
